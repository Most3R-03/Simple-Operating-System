[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_fifo32_init
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_sheet_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_task_alloc
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_mouse_decode
	EXTERN	_keytable0.0
	EXTERN	_wait_KBC_sendready
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_putfonts8_asc
	EXTERN	_task_now
	EXTERN	_sprintf
	EXTERN	_memman_total
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
LC0:
	DB	"console",0x00
LC1:
	DB	"task_a",0x00
LC2:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,1096
	MOV	DWORD [-1092+EBP],0
	MOV	DWORD [-1096+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDX,EAX
	AND	EDX,7
	MOV	DWORD [-1100+EBP],EDX
	MOV	DWORD [-1104+EBP],-1
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	CALL	_init_pit
	LEA	EDX,DWORD [-92+EBP]
	PUSH	256
	PUSH	EDX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	512
	PUSH	EAX
	CALL	_enable_mouse
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	LEA	EDX,DWORD [-124+EBP]
	PUSH	0
	LEA	EAX,DWORD [-764+EBP]
	PUSH	EAX
	PUSH	32
	PUSH	EDX
	CALL	_fifo32_init
	ADD	ESP,32
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1056+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1056+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1080+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-68+EBP],EAX
	CALL	_task_run
	ADD	ESP,32
	PUSH	ESI
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1068+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	EBX,EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,32
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_init_screen8
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	42240
	PUSH	3932160
	MOV	DWORD [-1076+EBP],EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	165
	MOV	DWORD [-1064+EBP],EAX
	PUSH	256
	PUSH	EAX
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	0
	PUSH	LC0
	PUSH	165
	PUSH	256
	PUSH	DWORD [-1064+EBP]
	CALL	_make_window8
	PUSH	0
	PUSH	128
	PUSH	240
	PUSH	28
	PUSH	8
	PUSH	DWORD [-1076+EBP]
	CALL	_make_textbox8
	ADD	ESP,44
	CALL	_task_alloc
	PUSH	65536
	PUSH	3932160
	MOV	DWORD [-1084+EBP],EAX
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [-1084+EBP]
	ADD	EAX,65524
	MOV	DWORD [100+EDX],EAX
	MOV	DWORD [76+EDX],_console_task
	MOV	DWORD [116+EDX],8
	MOV	DWORD [120+EDX],16
	MOV	DWORD [124+EDX],8
	MOV	DWORD [128+EDX],8
	MOV	DWORD [132+EDX],8
	MOV	DWORD [136+EDX],8
	MOV	EDX,DWORD [-1076+EBP]
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [-1084+EBP]
	MOV	EAX,DWORD [100+EDX]
	MOV	EDX,DWORD [-1056+EBP]
	MOV	DWORD [8+EAX],EDX
	PUSH	2
	PUSH	2
	PUSH	DWORD [-1084+EBP]
	CALL	_task_run
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	8320
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	ADD	ESP,32
	PUSH	-1
	MOV	DWORD [-1060+EBP],EAX
	PUSH	52
	PUSH	144
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_setbuf
	PUSH	1
	PUSH	LC1
	PUSH	52
	PUSH	144
	PUSH	DWORD [-1060+EBP]
	CALL	_make_window8
	ADD	ESP,40
	PUSH	7
	PUSH	16
	PUSH	128
	PUSH	28
	PUSH	8
	PUSH	EDI
	CALL	_make_textbox8
	MOV	DWORD [-1048+EBP],8
	MOV	DWORD [-1052+EBP],7
	CALL	_timer_alloc
	PUSH	1
	MOV	DWORD [-1088+EBP],EAX
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	PUSH	DWORD [-1088+EBP]
	CALL	_timer_init
	ADD	ESP,36
	PUSH	50
	PUSH	DWORD [-1088+EBP]
	CALL	_timer_settime
	PUSH	ESI
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	PUSH	16
	MOV	DWORD [-1072+EBP],EAX
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	99
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1040+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	DWORD [-1068+EBP]
	MOV	DWORD [-1044+EBP],EAX
	CALL	_sheet_slide
	PUSH	4
	PUSH	32
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	56
	PUSH	64
	PUSH	EDI
	CALL	_sheet_slide
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	DWORD [-1068+EBP]
	CALL	_sheet_updown
	ADD	ESP,32
	PUSH	1
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	3
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_updown
	LEA	EDX,DWORD [-124+EBP]
	PUSH	237
	PUSH	EDX
	CALL	_fifo32_put
	LEA	EAX,DWORD [-124+EBP]
	ADD	ESP,32
	PUSH	DWORD [-1100+EBP]
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
L2:
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JLE	L5
	CMP	DWORD [-1104+EBP],0
	JS	L57
L5:
	LEA	EBX,DWORD [-92+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JE	L58
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EDX
	LEA	EAX,DWORD [-256+ESI]
	CMP	EAX,255
	JBE	L59
	LEA	EAX,DWORD [-512+ESI]
	CMP	EAX,255
	JBE	L60
	CMP	ESI,1
	JG	L2
	TEST	ESI,ESI
	JE	L50
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-1088+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1052+EBP],0
	JS	L52
	MOV	DWORD [-1052+EBP],0
L52:
	PUSH	50
	PUSH	DWORD [-1088+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	CMP	DWORD [-1052+EBP],0
	JS	L2
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	MOVZX	EAX,BYTE [-1052+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,48
	JMP	L2
L50:
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-1088+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-1052+EBP],0
	JS	L52
	MOV	DWORD [-1052+EBP],7
	JMP	L52
L60:
	MOV	EDX,ESI
	MOVZX	EAX,DL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L2
	MOV	EAX,DWORD [-772+EBP]
	MOV	EDX,DWORD [-776+EBP]
	ADD	DWORD [-1044+EBP],EAX
	ADD	DWORD [-1040+EBP],EDX
	JS	L61
L43:
	CMP	DWORD [-1044+EBP],0
	JS	L62
L44:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1040+EBP],EAX
	JLE	L45
	MOV	DWORD [-1040+EBP],EAX
L45:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L46
	MOV	DWORD [-1044+EBP],EAX
L46:
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1040+EBP]
	PUSH	DWORD [-1072+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JE	L2
	MOV	EAX,DWORD [-1044+EBP]
	SUB	EAX,8
	PUSH	EAX
	MOV	EAX,DWORD [-1040+EBP]
	SUB	EAX,80
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,12
	JMP	L2
L62:
	MOV	DWORD [-1044+EBP],0
	JMP	L44
L61:
	MOV	DWORD [-1040+EBP],0
	JMP	L43
L59:
	CMP	ESI,383
	JG	L9
	CMP	DWORD [-1096+EBP],0
	JNE	L10
	MOV	AL,BYTE [_keytable0.0-256+ESI]
L56:
	MOV	BYTE [-60+EBP],AL
L12:
	MOV	DL,BYTE [-60+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L13
	TEST	DWORD [-1100+EBP],4
	JNE	L55
	CMP	DWORD [-1096+EBP],0
	JE	L15
L13:
	MOV	AL,BYTE [-60+EBP]
	TEST	AL,AL
	JE	L17
	CMP	DWORD [-1092+EBP],0
	JNE	L18
	CMP	DWORD [-1048+EBP],127
	JG	L17
	PUSH	1
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	MOV	BYTE [-59+EBP],0
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	ADD	DWORD [-1048+EBP],8
L17:
	CMP	ESI,270
	JE	L63
L21:
	CMP	ESI,284
	JE	L64
L25:
	CMP	ESI,271
	JE	L65
L27:
	CMP	ESI,298
	JE	L66
L30:
	CMP	ESI,310
	JE	L67
L31:
	CMP	ESI,426
	JE	L68
L32:
	CMP	ESI,438
	JE	L69
L33:
	CMP	ESI,314
	JE	L70
L34:
	CMP	ESI,325
	JE	L71
L35:
	CMP	ESI,326
	JE	L72
L36:
	CMP	ESI,506
	JE	L73
L37:
	CMP	ESI,510
	JE	L74
L38:
	CMP	DWORD [-1052+EBP],0
	JS	L39
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	43
	ADD	EAX,7
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	MOVZX	EAX,BYTE [-1052+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
L39:
	MOV	EAX,DWORD [-1048+EBP]
	PUSH	44
	ADD	EAX,8
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L2
L74:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1104+EBP]
	PUSH	96
	CALL	_io_out8
	POP	ESI
	POP	EAX
	JMP	L38
L73:
	MOV	DWORD [-1104+EBP],-1
	JMP	L37
L72:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1100+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1100+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L36
L71:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1100+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1100+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L35
L70:
	PUSH	237
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	XOR	DWORD [-1100+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1100+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L34
L69:
	AND	DWORD [-1096+EBP],-3
	JMP	L33
L68:
	AND	DWORD [-1096+EBP],-2
	JMP	L32
L67:
	OR	DWORD [-1096+EBP],2
	JMP	L31
L66:
	OR	DWORD [-1096+EBP],1
	JMP	L30
L65:
	CMP	DWORD [-1092+EBP],0
	JNE	L28
	PUSH	0
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1060+EBP]
	MOV	DWORD [-1092+EBP],1
	CALL	_make_wtitle8
	MOV	EDX,DWORD [-1076+EBP]
	PUSH	1
	PUSH	LC0
	PUSH	DWORD [4+EDX]
	PUSH	DWORD [-1064+EBP]
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1048+EBP]
	ADD	ESP,32
	ADD	EAX,7
	MOV	DWORD [-1052+EBP],-1
	PUSH	43
	PUSH	EAX
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	7
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	MOV	EAX,DWORD [-1084+EBP]
	PUSH	2
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,36
L29:
	PUSH	21
	PUSH	DWORD [4+EDI]
	PUSH	0
	PUSH	0
	PUSH	EDI
	CALL	_sheet_refresh
	MOV	EDX,DWORD [-1076+EBP]
	PUSH	21
	PUSH	DWORD [4+EDX]
	PUSH	0
	PUSH	0
	PUSH	EDX
	CALL	_sheet_refresh
	ADD	ESP,40
	JMP	L27
L28:
	PUSH	1
	PUSH	LC1
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [-1060+EBP]
	MOV	DWORD [-1092+EBP],0
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1076+EBP]
	PUSH	0
	PUSH	LC0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [-1064+EBP]
	CALL	_make_wtitle8
	MOV	EAX,DWORD [-1084+EBP]
	ADD	ESP,32
	ADD	EAX,16
	MOV	DWORD [-1052+EBP],0
	PUSH	3
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L29
L64:
	CMP	DWORD [-1092+EBP],0
	JE	L25
	MOV	EAX,DWORD [-1084+EBP]
	PUSH	266
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L25
L63:
	CMP	DWORD [-1092+EBP],0
	JNE	L22
	CMP	DWORD [-1048+EBP],8
	JLE	L21
	PUSH	1
	PUSH	LC2
	PUSH	7
	PUSH	0
	PUSH	28
	PUSH	DWORD [-1048+EBP]
	PUSH	EDI
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	SUB	DWORD [-1048+EBP],8
	JMP	L21
L22:
	MOV	EAX,DWORD [-1084+EBP]
	PUSH	264
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L21
L18:
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [-1084+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L17
L15:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-60+EBP],AL
	JMP	L13
L55:
	CMP	DWORD [-1096+EBP],0
	JE	L13
	JMP	L15
L10:
	MOV	AL,BYTE [_keytable1.1-256+ESI]
	JMP	L56
L9:
	MOV	BYTE [-60+EBP],0
	JMP	L12
L58:
	PUSH	DWORD [-1080+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	ECX
	JMP	L2
L57:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1104+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1104+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L5
	GLOBAL	_make_window8
_make_window8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,24
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOVSX	EAX,BYTE [24+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [-1+EBX]
	PUSH	0
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	LEA	EAX,DWORD [-2+EBX]
	PUSH	1
	MOV	DWORD [-32+EBP],EAX
	PUSH	EAX
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	DEC	EAX
	MOV	DWORD [-36+EBP],EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EDI,DWORD [-16+EBP]
	SUB	EDI,2
	PUSH	EDI
	PUSH	1
	PUSH	1
	PUSH	1
	PUSH	7
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	1
	PUSH	DWORD [-32+EBP]
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	PUSH	EAX
	LEA	EAX,DWORD [-3+EBX]
	PUSH	EAX
	PUSH	2
	PUSH	2
	PUSH	8
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	PUSH	EDI
	PUSH	DWORD [-32+EBP]
	PUSH	EDI
	PUSH	1
	PUSH	15
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-36+EBP]
	PUSH	0
	PUSH	0
	PUSH	EBX
	PUSH	ESI
	CALL	_boxfill8
	MOV	DWORD [8+EBP],ESI
	MOV	EAX,DWORD [-24+EBP]
	MOV	DWORD [12+EBP],EBX
	MOV	DWORD [20+EBP],EAX
	ADD	ESP,28
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [16+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_make_wtitle8
[SECTION .data]
_closebtn.2:
	DB	"OOOOOOOOOOOOOOO@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQQQ@@QQQQQ$@"
	DB	"OQQQQQ@@@@QQQQ$@"
	DB	"OQQQQ@@QQ@@QQQ$@"
	DB	"OQQQ@@QQQQ@@QQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"OQQQQQQQQQQQQQ$@"
	DB	"O$$$$$$$$$$$$$$@"
	DB	"@@@@@@@@@@@@@@@@"
[SECTION .text]
	GLOBAL	_make_wtitle8
_make_wtitle8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	CMP	BYTE [20+EBP],0
	JE	L77
	MOV	BL,7
	MOV	DL,12
L78:
	MOV	EAX,DWORD [12+EBP]
	PUSH	20
	SUB	EAX,4
	XOR	EDI,EDI
	PUSH	EAX
	PUSH	3
	PUSH	3
	MOVZX	EAX,DL
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [16+EBP]
	MOVSX	EAX,BL
	PUSH	EAX
	PUSH	4
	PUSH	24
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc
	ADD	ESP,52
	IMUL	EBX,DWORD [12+EBP],5
	MOV	DWORD [-16+EBP],0
L94:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,EBX
	XOR	ESI,ESI
	LEA	ECX,DWORD [-21+EDX+EAX*1]
L93:
	MOV	DL,BYTE [_closebtn.2+ESI+EDI*1]
	CMP	DL,64
	JE	L99
	CMP	DL,36
	JE	L100
	CMP	DL,81
	MOV	DL,8
	SETNE	AL
	SUB	DL,AL
L88:
	INC	ESI
	MOV	BYTE [ECX],DL
	INC	ECX
	CMP	ESI,15
	JLE	L93
	INC	DWORD [-16+EBP]
	ADD	EDI,16
	ADD	EBX,DWORD [12+EBP]
	CMP	DWORD [-16+EBP],13
	JLE	L94
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L100:
	MOV	DL,15
	JMP	L88
L99:
	XOR	EDX,EDX
	JMP	L88
L77:
	MOV	BL,8
	MOV	DL,15
	JMP	L78
	GLOBAL	_putfonts8_asc_sht
_putfonts8_asc_sht:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EBX,DWORD [20+EBP]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [28+EBP]
	MOV	DWORD [-24+EBP],EAX
	LEA	EAX,DWORD [15+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [-20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOVSX	EBX,BL
	LEA	ESI,DWORD [EAX+ESI*8]
	LEA	EAX,DWORD [-1+ESI]
	PUSH	EAX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOVZX	EAX,BYTE [24+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_putfonts8_asc
	MOV	DWORD [16+EBP],EDI
	LEA	EAX,DWORD [16+EDI]
	MOV	DWORD [20+EBP],ESI
	MOV	DWORD [24+EBP],EAX
	ADD	ESP,52
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [12+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_sheet_refresh
	GLOBAL	_make_textbox8
_make_textbox8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	ADD	EAX,DWORD [20+EBP]
	SUB	ESI,3
	PUSH	ESI
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,DWORD [24+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [-16+EBP]
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-24+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	PUSH	ESI
	SUB	EAX,2
	PUSH	EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SUB	EDI,3
	INC	EAX
	PUSH	EAX
	MOV	DWORD [-32+EBP],EAX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [-20+EBP]
	ADD	EBX,2
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [-16+EBP]
	PUSH	EBX
	ADD	EAX,2
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	7
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [16+EBP]
	SUB	EBX,2
	MOV	EDI,DWORD [12+EBP]
	PUSH	EBX
	DEC	EDI
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	ADD	ESP,56
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	8
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	DEC	EAX
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	PUSH	EDI
	MOVZX	EAX,BYTE [28+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC3:
	DB	">",0x00
LC4:
	DB	"mem",0x00
LC5:
	DB	"total   %dMB",0x00
LC6:
	DB	"free %dKB",0x00
LC7:
	DB	"cls",0x00
LC8:
	DB	"dir",0x00
LC9:
	DB	"filename.ext   %7d",0x00
LC10:
	DB	"type ",0x00
LC11:
	DB	"File not found.",0x00
LC12:
	DB	"Bad command.",0x00
[SECTION .text]
	GLOBAL	_console_task
_console_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,16
	PUSH	EBX
	SUB	ESP,596
	CALL	_task_now
	MOV	DWORD [-600+EBP],28
	PUSH	EAX
	MOV	DWORD [-596+EBP],EAX
	LEA	EAX,DWORD [-524+EBP]
	MOV	EBX,DWORD [-596+EBP]
	PUSH	EAX
	ADD	EBX,16
	PUSH	128
	PUSH	EBX
	MOV	DWORD [-604+EBP],-1
	CALL	_fifo32_init
	CALL	_timer_alloc
	PUSH	1
	PUSH	EBX
	PUSH	EAX
	MOV	DWORD [-592+EBP],EAX
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-592+EBP]
	CALL	_timer_settime
	ADD	ESP,36
	PUSH	1
	PUSH	LC3
	PUSH	0
	PUSH	7
	PUSH	28
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
L104:
	CALL	_io_cli
	MOV	ESI,DWORD [-596+EBP]
	ADD	ESI,16
	PUSH	ESI
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L219
	PUSH	ESI
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	CMP	EBX,1
	JLE	L220
L109:
	CMP	EBX,2
	JE	L221
L114:
	CMP	EBX,3
	JE	L222
L115:
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JA	L116
	CMP	EBX,264
	JE	L223
	CMP	EBX,266
	JE	L224
	CMP	EDI,239
	JG	L116
	MOV	EAX,EDI
	MOV	EDX,8
	MOV	ESI,EDX
	PUSH	1
	CDQ
	IDIV	ESI
	MOV	BYTE [-556+EBP],BL
	MOV	BYTE [-590+EBP+EAX*1],BL
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	MOV	BYTE [-555+EBP],0
	CALL	_putfonts8_asc_sht
L218:
	ADD	ESP,28
L116:
	CMP	DWORD [-604+EBP],0
	JS	L202
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,15
	PUSH	EAX
	LEA	EAX,DWORD [7+EDI]
	PUSH	EAX
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	MOVZX	EAX,BYTE [-604+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	ADD	ESP,28
L202:
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,16
	PUSH	EAX
	LEA	EAX,DWORD [8+EDI]
	PUSH	EAX
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L104
L224:
	PUSH	1
	LEA	ESI,DWORD [-588+EBP]
	PUSH	LC2
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	MOV	EAX,EDI
	MOV	EDX,8
	MOV	EDI,LC4
	MOV	EBX,EDX
	CDQ
	IDIV	EBX
	MOV	BYTE [-590+EBP+EAX*1],0
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	MOV	ECX,4
	CLD
	MOV	DWORD [-600+EBP],EAX
	REPE
	CMPSB
	SETA	DL
	SETB	AL
	ADD	ESP,36
	CMP	DL,AL
	JNE	L121
	MOV	EAX,DWORD [12+EBP]
	LEA	EBX,DWORD [-556+EBP]
	SHR	EAX,20
	PUSH	EAX
	PUSH	LC5
	PUSH	EBX
	CALL	_sprintf
	PUSH	30
	PUSH	EBX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,40
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	PUSH	3932160
	MOV	DWORD [-600+EBP],EAX
	CALL	_memman_total
	SHR	EAX,10
	MOV	DWORD [ESP],EAX
	PUSH	LC6
	PUSH	EBX
	CALL	_sprintf
	PUSH	30
	PUSH	EBX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,48
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	PUSH	DWORD [8+EBP]
	PUSH	EAX
	MOV	DWORD [-600+EBP],EAX
	CALL	_cons_newline
	ADD	ESP,16
	MOV	DWORD [-600+EBP],EAX
L122:
	PUSH	1
	MOV	EDI,16
	PUSH	LC3
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	JMP	L218
L121:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC7
	MOV	ECX,4
	REPE
	CMPSB
	JNE	L123
	MOV	EBX,28
L133:
	MOV	DWORD [-608+EBP],8
L132:
	MOV	ESI,DWORD [8+EBP]
	MOV	EAX,EBX
	IMUL	EAX,DWORD [4+ESI]
	ADD	EAX,DWORD [-608+EBP]
	MOV	EDX,DWORD [ESI]
	MOV	BYTE [EAX+EDX*1],0
	INC	DWORD [-608+EBP]
	CMP	DWORD [-608+EBP],247
	JLE	L132
	INC	EBX
	CMP	EBX,155
	JLE	L133
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	ESI
	CALL	_sheet_refresh
	ADD	ESP,20
	MOV	DWORD [-600+EBP],28
	JMP	L122
L123:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC8
	MOV	ECX,4
	REPE
	CMPSB
	JNE	L135
	MOV	DWORD [-608+EBP],0
	XOR	ESI,ESI
L148:
	MOV	AL,BYTE [1058304+ESI]
	TEST	AL,AL
	JE	L197
	CMP	AL,-27
	JE	L138
	TEST	BYTE [1058315+ESI],24
	JNE	L138
	PUSH	DWORD [1058332+ESI]
	PUSH	LC9
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	XOR	EBX,EBX
	CALL	_sprintf
	LEA	EDX,DWORD [1058304+ESI]
	ADD	ESP,12
L147:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [-556+EBP+EBX*1],AL
	INC	EBX
	CMP	EBX,7
	JLE	L147
	MOV	AL,BYTE [1058312+ESI]
	MOV	BYTE [-547+EBP],AL
	MOV	AL,BYTE [1058313+ESI]
	MOV	BYTE [-546+EBP],AL
	MOV	AL,BYTE [1058314+ESI]
	PUSH	30
	MOV	BYTE [-545+EBP],AL
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	ADD	ESP,36
	MOV	DWORD [-600+EBP],EAX
L138:
	INC	DWORD [-608+EBP]
	ADD	ESI,32
	CMP	DWORD [-608+EBP],223
	JLE	L148
L197:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
L217:
	CALL	_cons_newline
	POP	EDI
	MOV	DWORD [-600+EBP],EAX
	POP	EAX
	JMP	L122
L135:
	CLD
	LEA	ESI,DWORD [-588+EBP]
	MOV	EDI,LC10
	MOV	ECX,5
	REPE
	CMPSB
	JNE	L150
	XOR	EBX,EBX
L155:
	MOV	BYTE [-556+EBP+EBX*1],32
	INC	EBX
	CMP	EBX,10
	JLE	L155
	XOR	EBX,EBX
	MOV	DWORD [-608+EBP],5
	CMP	BYTE [-583+EBP],0
	JE	L157
L164:
	MOV	EAX,DWORD [-608+EBP]
	MOV	DL,BYTE [-588+EBP+EAX*1]
	CMP	DL,46
	JE	L225
L161:
	LEA	EAX,DWORD [-97+EDX]
	MOV	BYTE [-556+EBP+EBX*1],DL
	CMP	AL,25
	JA	L163
	LEA	EAX,DWORD [-32+EDX]
	MOV	BYTE [-556+EBP+EBX*1],AL
L163:
	INC	EBX
L158:
	INC	DWORD [-608+EBP]
	CMP	EBX,10
	JG	L157
	MOV	EDX,DWORD [-608+EBP]
	CMP	BYTE [-588+EBP+EDX*1],0
	JNE	L164
L157:
	MOV	DWORD [-608+EBP],0
	XOR	ECX,ECX
L178:
	CMP	BYTE [1058304+ECX],0
	JE	L166
	TEST	BYTE [1058315+ECX],24
	JNE	L176
	XOR	EBX,EBX
L177:
	MOVZX	EDX,BYTE [1058304+ECX+EBX*1]
	MOVSX	EAX,BYTE [-556+EBP+EBX*1]
	CMP	EDX,EAX
	JNE	L176
	INC	EBX
	CMP	EBX,10
	JLE	L177
L166:
	CMP	DWORD [-608+EBP],223
	JG	L179
	MOV	EAX,DWORD [-608+EBP]
	SAL	EAX,5
	CMP	BYTE [1058304+EAX],0
	JE	L179
	MOV	EBX,DWORD [1058332+EAX]
	MOV	EDI,8
	MOVZX	EAX,WORD [1058330+EAX]
	SAL	EAX,9
	MOV	DWORD [-608+EBP],0
	LEA	ESI,DWORD [1064448+EAX]
	CMP	DWORD [-608+EBP],EBX
	JGE	L197
L196:
	MOV	ECX,DWORD [-608+EBP]
	MOV	AL,BYTE [ECX+ESI*1]
	MOV	BYTE [-556+EBP],AL
	CMP	AL,9
	MOV	BYTE [-555+EBP],0
	JE	L185
	MOV	AL,BYTE [-556+EBP]
	CMP	AL,10
	JE	L216
	CMP	AL,13
	JE	L182
	PUSH	1
	LEA	EAX,DWORD [-556+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	CMP	EDI,248
	JE	L216
L182:
	INC	DWORD [-608+EBP]
	CMP	DWORD [-608+EBP],EBX
	JL	L196
	JMP	L197
L216:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	MOV	EDI,8
	CALL	_cons_newline
	MOV	DWORD [-600+EBP],EAX
	POP	EAX
	POP	EDX
	JMP	L182
L185:
	PUSH	1
	PUSH	LC2
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	ADD	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	CMP	EDI,248
	JE	L226
L188:
	LEA	EAX,DWORD [-8+EDI]
	AND	EAX,31
	JNE	L185
	JMP	L182
L226:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	MOV	EDI,8
	CALL	_cons_newline
	POP	ECX
	MOV	DWORD [-600+EBP],EAX
	POP	EAX
	JMP	L188
L179:
	PUSH	15
	PUSH	LC11
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	ADD	ESP,36
	MOV	DWORD [-600+EBP],EAX
	JMP	L197
L176:
	INC	DWORD [-608+EBP]
	ADD	ECX,32
	CMP	DWORD [-608+EBP],223
	JLE	L178
	JMP	L179
L225:
	CMP	EBX,8
	JG	L161
	MOV	EBX,8
	JMP	L158
L150:
	CMP	BYTE [-588+EBP],0
	JE	L122
	PUSH	12
	PUSH	LC12
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	CALL	_cons_newline
	ADD	ESP,36
	PUSH	DWORD [8+EBP]
	MOV	DWORD [-600+EBP],EAX
	PUSH	EAX
	JMP	L217
L223:
	CMP	EDI,16
	JLE	L116
	PUSH	1
	PUSH	LC2
	PUSH	0
	PUSH	7
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	SUB	EDI,8
	PUSH	DWORD [8+EBP]
	CALL	_putfonts8_asc_sht
	JMP	L218
L222:
	MOV	EAX,DWORD [-600+EBP]
	ADD	EAX,15
	PUSH	EAX
	LEA	EAX,DWORD [7+EDI]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [-600+EBP]
	PUSH	EDI
	PUSH	0
	PUSH	DWORD [4+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	ADD	ESP,28
	MOV	DWORD [-604+EBP],-1
	JMP	L115
L221:
	MOV	DWORD [-604+EBP],7
	JMP	L114
L220:
	TEST	EBX,EBX
	JE	L110
	PUSH	0
	PUSH	ESI
	PUSH	DWORD [-592+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-604+EBP],0
	JS	L112
	MOV	DWORD [-604+EBP],7
L112:
	PUSH	50
	PUSH	DWORD [-592+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	JMP	L109
L110:
	PUSH	1
	PUSH	ESI
	PUSH	DWORD [-592+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-604+EBP],0
	JS	L112
	MOV	DWORD [-604+EBP],0
	JMP	L112
L219:
	PUSH	DWORD [-596+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EBX
	JMP	L104
	GLOBAL	_cons_newline
_cons_newline:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,28
	PUSH	EBX
	CMP	DWORD [8+EBP],139
	JG	L239
	ADD	DWORD [8+EBP],16
L229:
	MOV	EAX,DWORD [8+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L239:
	MOV	ESI,8
L238:
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,EDI
	MOV	ECX,DWORD [4+EAX]
	MOV	EBX,DWORD [EAX]
	LEA	EAX,DWORD [16+EDI]
	IMUL	EAX,ECX
	IMUL	EDX,ECX
	LEA	EAX,DWORD [EAX+ESI*1]
	LEA	EDX,DWORD [EDX+ESI*1]
	INC	ESI
	MOV	AL,BYTE [EAX+EBX*1]
	CMP	ESI,247
	MOV	BYTE [EDX+EBX*1],AL
	JLE	L238
	INC	EDI
	CMP	EDI,139
	JLE	L239
	MOV	EDI,140
L249:
	MOV	ESI,8
L248:
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,EDI
	MOV	ECX,EDX
	IMUL	EAX,DWORD [4+EDX]
	MOV	EDX,DWORD [EDX]
	LEA	EAX,DWORD [EAX+ESI*1]
	INC	ESI
	CMP	ESI,247
	MOV	BYTE [EAX+EDX*1],0
	JLE	L248
	INC	EDI
	CMP	EDI,155
	JLE	L249
	PUSH	156
	PUSH	248
	PUSH	28
	PUSH	8
	PUSH	ECX
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L229
